ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 .include "cmp/array_structure.h.s"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              1 .include "cmp/entity.h.s"
                              1 
                              2 
                              3 .macro DefineCmp_Entity _x, _y, _vx, _vy, _w, _h, _pspr, _AIstatus
                              4 	.db _x, _y		;posición
                              5 	.db _vx, _vy	;velocidad
                              6 	.db _w, _h		;tamaño
                              7 	.dw _pspr		;puntero a sprite
                              8 	.db 0x00, 0x00	;e_ai_aim_x y e_ai_aim_y posición objetivo a la que moverse
                              9 	.db _AIstatus	;AI status
                             10 	.db _AIstatus	;Previous AI status
                             11 	.db 0x00		;Step, contador de waypoints
                             12 	.dw #0xCCCC		;últia posición del sprite en memoria de video (para utilizarla para el borrado del sprite)
                             13 .endm
                             14 
                             15 
                             16 .macro DefineCmp_Entity_default
                             17 	DefineCmp_Entity 0, 0, 0, 0, 1, 1, 0x0000, e_ai_st_noAI
                             18 .endm
                             19 
                             20 ;;Definición de constantes: offsets de cada entidad para usar con ix
                             21 
                             22 
                     0000    23 e_x = 0		;posición x
                     0001    24 e_y = 1		;posición y
                     0002    25 e_vx = 2 		;velocidad en x
                     0003    26 e_vy = 3		;velocidad en y
                     0004    27 e_w = 4		;anchura del sprite en bytes
                     0005    28 e_h = 5		;altura del sprite en bytes
                     0006    29 e_pspr_l = 6	;byte bajo de la dirección de memoria del sprite
                     0007    30 e_pspr_h = 7	;byte alto de la dirección de memoria del sprite (primero el bajo porque es little endian)	;byte bajo de la posición de memoria de video antes de mover el sprite para su borrado
                     0008    31 e_ai_aim_X = 8	;posición objetivo de las entidades que tienen ia y su status es moverse
                     0009    32 e_ai_aim_y = 9	;posición objetivo de las entidades que tienen ia y su status es moverse
                     000A    33 e_ai_st = 10
                     000B    34 e_ai_pre_st = 11
                     000C    35 e_ai_patrol_step = 12
                     000D    36 e_lastVP_l = 13	;byte bajo de la posición de memoria de video antes de mover el sprite para su borrado
                     000E    37 e_lastVP_h = 14	;en este byte se guarda en status de la ia (desde 0=no tiene ia hasta moverse o permanecer parado)
                     000F    38 sizeof_e = 15	;tamaño de los datos de la entidad en bytes (para calcular el punto al que mover el puntero para pasar de una entidad a otra)
                             39 	
                             40 ;;Creamos una enumeración de status de ia
                             41 
                     0000    42 e_ai_st_noAI = 0		;status no IA, el que cargará la definición del componente por defercto
                     0001    43 e_ai_st_stand_by = 1	;stand by
                     0002    44 e_ai_st_move_to = 2
                     0003    45 e_ai_st_patrol = 3
                             46 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                              2 
                              3 
                              4 ;define un array de _N entidades del tipo _DefineTypeMacroDefault
                              5 ;el símbolo ' se utiliza para concatenar nombres, por lo tanto los dos primeros elementos llevarán las etiquetas
                              6 ;con el nombre dado, en principio no habrá ningúna entidad porque solo se reserva sitio en memoria para las entidades
                              7 ;no las entidades en si. Para generan entidades en este hueco se utiliza otras rutinas => man_entity_create y man_entity_new
                              8 ;de man/entity.h.s
                              9 ;_Tname_pend (_entity_pend en este caso) guarda la dirección que apunta al lugar donde se debe crear la nueva entidad
                             10 ;es decir, al final del array
                             11 
                             12 .macro DefineComponentArrayStructure _Tname, _N, _DefineTypeMacroDefault
                             13 	_Tname'_num: .db 0
                             14 	_Tname'_pend: .dw _Tname'_array
                             15 	_Tname'_array:
                             16 	.rept _N
                             17 		_DefineTypeMacroDefault
                             18 	.endm
                             19 	.db #0xDE, #0xAD, #0x00, #0x00, #0x00			;se crean tres nuevos bytes al final del array de forma provisional 
                             20 .endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                              2 
                              3 
                     0050     4 screen_width = 80
                     00C8     5 screen_height = 200
                              6 
   0000                       7 sys_physics_init::
   0000 DD 22 07 00   [20]    8 	ld (_ent_array_ptr), ix
   0004 C9            [10]    9 ret
                             10 
                             11 ;INPUT: 	IX POINTER TO ENTITY ARRAY
                             12 ;		A NUMBER OF ELEMENTS IN THE ARRAY
   0005                      13 sys_pysics_update::
                     0007    14 	_ent_array_ptr = .+2		;ld ix es una instrucción del juego extendido, por ellos la posición de 0x0000 será .+2
   0005 DD 21 00 00   [14]   15 	ld ix, #0x0000			;
                             16 	;ld b, a	;b number of entities in the array
                             17 
   0009                      18 _update_loop:
                             19 
   0009 DD 7E 04      [19]   20 	ld a, e_w(ix)
   000C B7            [ 4]   21 	or a
   000D C8            [11]   22 	ret z
                             23 
   000E 3E 51         [ 7]   24 	ld a, #screen_width + 1
   0010 DD 96 04      [19]   25 	sub e_w(ix)
   0013 4F            [ 4]   26 	ld c, a			;C = posición máxima de la entidad + 1
                             27 
   0014 DD 7E 00      [19]   28 	ld a, e_x(ix)		;A = Posición actual
   0017 DD 86 02      [19]   29 	add e_vx(ix)		;A = Posición actual + velocidad
   001A B9            [ 4]   30 	cp c				;comparar con la posición maxima mas uno (si es la máxima daría cero)
   001B 30 05         [12]   31 	jr nc, invalid_x
                             32 
   001D                      33 	valid_x:
   001D DD 77 00      [19]   34 		ld e_x(ix), a	;cargar en e_x la nueva posición
   0020 18 08         [12]   35 		jr endif_x
                             36 
   0022                      37 	invalid_x:
   0022 DD 7E 02      [19]   38 		ld a, e_vx(ix)
   0025 ED 44         [ 8]   39 		neg
   0027 DD 77 02      [19]   40 		ld e_vx(ix), a		;se invierte la velocidad en x
                             41 
   002A                      42 	endif_x:
                             43 
   002A 3E C9         [ 7]   44 	ld a, #screen_height + 1
   002C DD 96 05      [19]   45 	sub e_h(ix)
   002F 4F            [ 4]   46 	ld c, a				;C = posición máxima de la entidad + 1
                             47 
   0030 DD 7E 01      [19]   48 	ld a, e_y(ix)
   0033 DD 86 03      [19]   49 	add e_vy(ix)
   0036 B9            [ 4]   50 	cp c					;comparar con la posición máxima + 1 
   0037 30 05         [12]   51 	jr nc, invalid_y
                             52 
   0039                      53 	valid_y:
   0039 DD 77 01      [19]   54 		ld e_y(ix), a	;cargar en e_y la nueva posición
   003C 18 08         [12]   55 		jr endif_y
                             56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



   003E                      57 	invalid_y:
   003E DD 7E 03      [19]   58 		ld a, e_vy(ix)
   0041 ED 44         [ 8]   59 		neg
   0043 DD 77 03      [19]   60 		ld e_vy(ix), a	;se invierte la velocidad en y
                             61 
   0046                      62 	endif_y:
                             63 
                             64 	;dec b		;numero de entidades en el array
                             65 	;ret z
                             66 
   0046 11 0F 00      [10]   67 	ld de, #sizeof_e
   0049 DD 19         [15]   68 	add ix, de			;ix apunta a la siguiente entidad
   004B 18 BC         [12]   69 	jr _update_loop
                             70 
                             71 
